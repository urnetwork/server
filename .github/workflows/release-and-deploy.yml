name: Release and Deploy
permissions:
  contents: write

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    # Run daily at 11:00 AM Pacific Time (Standard Time: 19:00 UTC, DST: 18:00 UTC)
    - cron: "0 19 * * *" # Update to '0 18 * * *' during DST if needed
jobs:
  release_if_necessary:
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"
          fetch-tags: "true"

      - name: "Setup nix env"
        uses: JRMurr/direnv-nix-action@v4.1.0

      - name: Install semver-release
        run: |
          go install github.com/urnetwork/semver-release@v0.0.8
          echo "$HOME/go/bin/" >> "$GITHUB_PATH"

      - name: Edit go mod for server
        run: |
          go mod edit -dropreplace github.com/urnetwork/connect@v0.0.0
          go mod edit -dropreplace github.com/urnetwork/protocol@v0.0.0
          go mod edit -require github.com/urnetwork/connect@latest -require github.com/urnetwork/protocol@latest
          go mod tidy

      - name: Check if release is needed
        id: release_needed
        run: |
          echo "RELEASE_NEEDED=$(semver-release release-needed)" >> "$GITHUB_OUTPUT"

      - name: Precompile Everything
        if: ${{steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        env:
          SKIP_METRICS: "true"
        run: |
          go build ./...

      - name: Measure Throughput - single client
        if: ${{steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        env:
          SKIP_METRICS: "true"
        run: |
          go run ./measure-throughput

      - name: Measure Throughput - multi client
        if: ${{steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        env:
          USE_MULTICLIENT: "true"
          SKIP_METRICS: "true"
        run: |
          go run ./measure-throughput

      - name: Create Release
        if: ${{ steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        id: create-release
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY
          PREVIOUS_RELEASE="$($HOME/go/bin/semver-release latest .)"
          $HOME/go/bin/semver-release release
          git push origin --tags
          CURRENT_RELEASE="$($HOME/go/bin/semver-release latest .)"

          set -x
          echo "## Release Commits `v$PREVIOUS_RELEASE`..`v$CURRENT_RELEASE`" > release-commits.md
          git log "v$PREVIOUS_RELEASE".."v$CURRENT_RELEASE^" --oneline | sed 's/^/- /' -  >> release-commits.md

          echo "version=$($HOME/go/bin/semver-release latest .)" >> "$GITHUB_OUTPUT"

      - name: Create Github Release
        if: ${{ steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        uses: "comnoco/create-release-action@v2"
        with:
          tag_name: v${{steps.create-release.outputs.version}}
          release_name: Release ${{steps.create-release.outputs.version}}
          body_path: release-commits.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: ${{steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        run: docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" -p "${{ secrets.DOCKER_HUB_TOKEN }}"

      - name: Docker Build and Push API
        if: ${{steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        working-directory: api
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -trimpath -o build/linux/arm64/
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -trimpath -o build/linux/amd64/
          docker buildx build --platform linux/amd64,linux/arm64 -t bringyour/main-api:"$(semver-release latest .)" --push .

      - name: Docker Build and Push Connect
        if: ${{steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        working-directory: connect
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -trimpath -o build/linux/arm64/
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -trimpath -o build/linux/amd64/
          docker buildx build --platform linux/amd64,linux/arm64 -t bringyour/main-connect:"$(semver-release latest .)" --push .

      - name: Docker Build and Push Taskworker
        if: ${{steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        working-directory: taskworker
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -trimpath -o build/linux/arm64/
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -trimpath -o build/linux/amd64/
          docker buildx build --platform linux/amd64,linux/arm64 -t bringyour/main-taskworker:"$(semver-release latest .)" --push .

      - name: Docker Build Unified Server Image
        if: ${{steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}        
        run: |
          docker build . --platform linux/arm64/v8,linux/amd64 -t bringyour/server:"$(semver-release latest .)"
          docker push bringyour/main-server:"$(semver-release latest .)"

      - name: Roll out the Relese
        if: ${{steps.release_needed.outputs.RELEASE_NEEDED == 'true'}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-west-1
        run: |
          LATEST_VERSION="$(semver-release latest server)"

          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-api-beta"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW
          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-api-g1"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW

          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-connect-beta"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW
          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-connect-g1"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW
          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-connect-g2"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW
          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-connect-g3"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW
          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-connect-g4"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW

          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-taskworker-g1"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW
