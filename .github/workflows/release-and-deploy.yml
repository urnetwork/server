name: Release and Deploy
permissions:
  contents: write

on:
  workflow_dispatch: # Allows manual triggering
  schedule:
    # Run daily at 11:00 AM Pacific Time (Standard Time: 19:00 UTC, DST: 18:00 UTC)
    - cron: "0 19 * * *" # Update to '0 18 * * *' during DST if needed
jobs:
  release_if_necessary:
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_PRIVATE_KEY }}" > ~/.ssh/server_key
          echo "${{ secrets.CONNECT_PRIVATE_KEY }}" > ~/.ssh/connect_key
          echo "${{ secrets.PROTOCOL_PRIVATE_KEY }}" > ~/.ssh/protocol_key
          echo "${{ secrets.USERWIREGUARD_PRIVATE_KEY }}" > ~/.ssh/userwireguard_key
          chmod 600 ~/.ssh/server_key ~/.ssh/connect_key ~/.ssh/protocol_key ~/.ssh/userwireguard_key

          # Create SSH config file
          echo "Host github-server-key" >> ~/.ssh/config
          echo "  HostName github.com" >> ~/.ssh/config
          echo "  User git" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/server_key" >> ~/.ssh/config

          echo "Host github-connect-key" >> ~/.ssh/config
          echo "  HostName github.com" >> ~/.ssh/config
          echo "  User git" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/connect_key" >> ~/.ssh/config

          echo "Host github-protocol-key" >> ~/.ssh/config
          echo "  HostName github.com" >> ~/.ssh/config
          echo "  User git" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/protocol_key" >> ~/.ssh/config

          echo "Host github-userwireguard-key" >> ~/.ssh/config
          echo "  HostName github.com" >> ~/.ssh/config
          echo "  User git" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/userwireguard_key" >> ~/.ssh/config

          # Add GitHub to known_hosts to avoid prompt
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Clone Repos
        run: |
          git clone git@github-server-key:urnetwork/server.git
          git clone git@github-connect-key:urnetwork/connect.git
          git clone git@github-protocol-key:urnetwork/protocol.git
          git clone git@github-userwireguard-key:urnetwork/userwireguard.git

      - name: Install semver-release
        run: |
          go install github.com/urnetwork/semver-release@v0.0.7
          echo "$HOME/go/bin/" >> "$GITHUB_PATH"

      - name: Check if releases are needed
        id: releases_needed
        run: |
          echo "PROTOCOL_RELEASE_NEEDED=$(semver-release release-needed protocol)" >> "$GITHUB_OUTPUT"
          echo "USERWIREGUARD_RELEASE_NEEDED=$(semver-release release-needed userwireguard)" >> "$GITHUB_OUTPUT"
          echo "CONNECT_RELEASE_NEEDED=$(semver-release release-needed connect)" >> "$GITHUB_OUTPUT"
          echo "SERVER_RELEASE_NEEDED=$(semver-release release-needed server)" >> "$GITHUB_OUTPUT"

      - name: Release protocol
        working-directory: protocol
        if: ${{steps.releases_needed.outputs.PROTOCOL_RELEASE_NEEDED == 'true'}}
        run: |
          semver-release release
          git push origin --tags

      - name: Release UserWireGuard
        if: ${{steps.releases_needed.outputs.USERWIREGUARD_RELEASE_NEEDED == 'true'}}
        working-directory: userwireguard
        run: |
          semver-release release
          git push origin --tags

      - name: Release Connect
        if: ${{steps.releases_needed.outputs.USERWIREGUARD_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.PROTOCOL_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.CONNECT_RELEASE_NEEDED == 'true'  }}
        working-directory: connect
        run: |
          go mod edit -dropreplace github.com/urnetwork/userwireguard@v0.0.0
          go mod edit -dropreplace github.com/urnetwork/protocol@v0.0.0
          go mod edit -require github.com/urnetwork/userwireguard@v"$(semver-release latest -n /home/runner/work/server/server/userwireguard)" -require github.com/urnetwork/protocol@v"$(semver-release latest -n /home/runner/work/server/server/protocol)"
          go mod tidy
          semver-release release
          git push origin --tags

      - name: Edit go mod for server
        if: ${{steps.releases_needed.outputs.USERWIREGUARD_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.PROTOCOL_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.CONNECT_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.SERVER_RELEASE_NEEDED == 'true'}}
        working-directory: server
        run: |
          go mod edit -dropreplace github.com/urnetwork/connect@v0.0.0
          go mod edit -dropreplace github.com/urnetwork/protocol@v0.0.0
          go mod edit -require github.com/urnetwork/connect@v"$(semver-release latest -n /home/runner/work/server/server/connect)" -require github.com/urnetwork/protocol@v"$(semver-release latest -n /home/runner/work/server/server/protocol)"
          go mod tidy
          semver-release release

      - name: Precompile Everything
        if: ${{steps.releases_needed.outputs.USERWIREGUARD_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.PROTOCOL_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.CONNECT_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.SERVER_RELEASE_NEEDED == 'true'}}
        working-directory: server
        env:
          SKIP_METRICS: "true"
        run: |
          go build ./...

      - name: Measure Throughput - single client
        if: ${{steps.releases_needed.outputs.USERWIREGUARD_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.PROTOCOL_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.CONNECT_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.SERVER_RELEASE_NEEDED == 'true'}}
        working-directory: server
        env:
          SKIP_METRICS: "true"
        run: |
          go run ./measure-throughput

      - name: Measure Throughput - multi client
        if: ${{steps.releases_needed.outputs.USERWIREGUARD_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.PROTOCOL_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.CONNECT_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.SERVER_RELEASE_NEEDED == 'true'}}
        working-directory: server
        env:
          USE_MULTICLIENT: "true"
          SKIP_METRICS: "true"
        run: |
          go run ./measure-throughput

      - name: Set up Docker Buildx
        if: ${{steps.releases_needed.outputs.USERWIREGUARD_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.PROTOCOL_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.CONNECT_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.SERVER_RELEASE_NEEDED == 'true'}}
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: ${{steps.releases_needed.outputs.USERWIREGUARD_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.PROTOCOL_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.CONNECT_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.SERVER_RELEASE_NEEDED == 'true'}}
        run: docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" -p "${{ secrets.DOCKER_HUB_TOKEN }}"

      - name: Docker Build and Push API
        if: ${{steps.releases_needed.outputs.USERWIREGUARD_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.PROTOCOL_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.CONNECT_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.SERVER_RELEASE_NEEDED == 'true'}}
        working-directory: server/api
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -trimpath -o build/linux/arm64/
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -trimpath -o build/linux/amd64/
          docker buildx build --platform linux/amd64,linux/arm64 -t bringyour/main-api:"$(semver-release latest .)" --push .

      - name: Docker Build and Push Connect
        if: ${{steps.releases_needed.outputs.USERWIREGUARD_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.PROTOCOL_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.CONNECT_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.SERVER_RELEASE_NEEDED == 'true'}}
        working-directory: server/connect
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -trimpath -o build/linux/arm64/
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -trimpath -o build/linux/amd64/
          docker buildx build --platform linux/amd64,linux/arm64 -t bringyour/main-connect:"$(semver-release latest .)" --push .

      - name: Docker Build and Push Taskworker
        if: ${{steps.releases_needed.outputs.USERWIREGUARD_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.PROTOCOL_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.CONNECT_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.SERVER_RELEASE_NEEDED == 'true'}}
        working-directory: server/taskworker
        run: |
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -trimpath -o build/linux/arm64/
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -trimpath -o build/linux/amd64/
          docker buildx build --platform linux/amd64,linux/arm64 -t bringyour/main-taskworker:"$(semver-release latest .)" --push .

      - name: Roll out the Relese
        if: ${{steps.releases_needed.outputs.USERWIREGUARD_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.PROTOCOL_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.CONNECT_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.SERVER_RELEASE_NEEDED == 'true'}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-west-1
        run: |
          LATEST_VERSION="$(semver-release latest server)"

          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-api-beta"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW
          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-api-g1"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW

          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-connect-beta"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW
          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-connect-g1"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW
          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-connect-g2"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW
          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-connect-g3"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW
          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-connect-g4"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW

          aws dynamodb update-item --table-name=deployment-blocks --key '{"env-service-block": {"S": "main-taskworker-g1"}}' --update-expression 'SET version=:version' --expression-attribute-values='{":version": {"S": "'${LATEST_VERSION}'"}}' --return-values ALL_NEW

      - name: Push the release tag
        if: ${{steps.releases_needed.outputs.USERWIREGUARD_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.PROTOCOL_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.CONNECT_RELEASE_NEEDED == 'true' || steps.releases_needed.outputs.SERVER_RELEASE_NEEDED == 'true'}}
        working-directory: server
        run: |
          git push origin -f --tags
